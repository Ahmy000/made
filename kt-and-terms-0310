
### year: 2018
## date: 0520
# invoke() method

class UrlScraper() {
    operator fun invoke(url: String): List<ParseResult> {
        return listOf(ParseResult(), ParseResult())
    }
}

val sList = UrlScraper()("www.google.com")

# this example is not easy to understand
class Invokable {
    var numberOfInvocations: Int = 0
        private set
    operator fun invoke(): Invokable { // can return any kind
        numberOfInvocations ++
        print(numberOfInvocations)
        return this
    }
}

fun invokeTwice(invokable: Invokable) = invokable()()

# main func
fun main(args : Array<String>) { 
}

# primary/secondary constructor
A class in Kotlin can have a primary constructor and one or more secondary constructors. 
The primary constructor is part of the class header: it goes after the class name (and optional type parameters).

# private constructor
class MyClass private constructor() {

}

# sealed class
To declare a sealed class, you put the sealed modifier before the name of the class. 
A sealed class can have subclasses, but all of them must be declared in the same file as the sealed class itself. 
(Before Kotlin 1.1, the rules were even more strict: classes had to be nested inside the declaration of the sealed class).
- nested inside
- in the same file
- sealed class is abstract
- has no public constructor
- subcalsses: usually is data class

# arrow.Try
Try{f()}.fold(onError(), onSuccess())
Try{}.fold({}, {})

## date: 0519
# double colon/::
- get class: BTCService::class.java)
- 

# object
Object expressions: anonymous class  
Object declarations: singleton
Companion Objects: companion object

## date: 0402
#
ABI: Application Binary Interface
ABIs
armeabi/armeabi-v7a/arm64-v8a

## date: 0310

#
FAB: Floating Action Button
ANR: app not responding

#
physical back button
home button
recent applications button
