
### year: 2018
## date: 0307

# SharedPreferences
public interface SharedPreferences 

Context::
SharedPreferences getSharedPreferences (String name, 
                int mode)
                
 sharedPreferences.edit().putString("key", "value").apply()
 sharedPreferences.getString("key", "defaultValue")

                
## date: 0306
# Bundle
public final class Bundle 
extends BaseBundle implements Cloneable, Parcelable

a HashMap inside it, 
getXXX(String key)/putXXX(String key, XXX value)

Bundle bundle = new Bundle();
bundle.putString("key", "value");

# Loader
public class Loader 
extends Object 

A class that performs asynchronous loading of data. 
Loaders were designed for activities and fragments in order to cleanly handle configuration changes that occur in Activites and Fragments
 Known Direct Subclasses
AsyncTaskLoader<D>
  Known Indirect Subclasses
CursorLoader

That means common loader usual is AsyncTaskLoader<D> which managed by LoaderManager inside Activity or Fragment.

# LoaderManager
Activity.getLoaderManager()
Fragment.getLoaderManager()

getLoaderManager().restartLoader(
getLoaderManager().initLoader(

# must override method
protected abstract SomeType someMethod();

# AsyncTaskLoader
public abstract class AsyncTaskLoader 
extends Loader<D> 

must be override 
abstract D loadInBackground()

# how to use loader or self-defined loader
LoaderManager is public in Activity and Fragment, first thing we do is implemeting LoaderCallbacks, 
and return Loader by onCreateLoader. 
Secondly is start the loader, if use AsyncTaskLoader, method loadInBackground is core, 
otherwise override method onStartLoading.
