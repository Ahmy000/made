### year: 2018
## date: 0321
# ComponentName
Identifier for a specific application component (Activity, Service, BroadcastReceiver, or ContentProvider)
that is available. Two pieces of information, encapsulated here, are required to identify a component:
the package (a String) it exists in, and the class (a String) name inside of that package.

## date: 0317
#
public abstract class Context
public class Application extends ContextWrapper implements ComponentCallbacks2

Note: There is normally no need to subclass Application. 
In most situations, static singletons can provide the same functionality in a more modular way. 
If your singleton needs a global context (for example to register broadcast receivers), 
include Context.getApplicationContext() as a Context argument when invoking your singleton's getInstance() method.

#
Your app should implement the onSaveInstanceState() callback after the onPause() method, and before onStop(). 
Do not implement this callback in onPause()/onStop()

Instead of restoring the state during onCreate() you may choose to implement onRestoreInstanceState(), 
which the system calls after the onStart() method

#
intent.putExtra("myKey", parcelableOrCommonArray );  
Bundle extras = intent.getExtras(); -- Bundle is a key-value like map 
-- 这写法并不一致, put的时候是单个key-value对，而get的时候一下拿出来，好吧，


## date: 0316
# 
java.lang.System -- operate JVM directly, including exit(0)
android.os.Process -- get the OS processes info
android.os.Process.killProcess(android.os.Process.myPid());

# add fragment to activity dynamically
FragmentTransaction fragmentTransaction = getFragmentManager().beginTransaction();
HelloFragment hello = new HelloFragment();
fragmentTransaction.add(R.id.fragment_container, hello, fragTag).commit(); -- fragTag is an optional string, can used by findFragementByTag

getSupportFragmentManager()
                .beginTransaction()
                .add(containerViewId, fragment, fragmentTag)
                .disallowAddToBackStack()
                .commit();

## date: 0313
# ActivityCompat
shouldShowRequestPermissionRationale
requestPermissions

# ContextCompat -- ActivityCompat is derived class
checkSelfPermission(Context context, String permission)

# 

## date: 0312
# conifg for activity 
android:configChanges="keyboardHidden|orientation|screenSize" -- onCreate will be called without this or improper 

fun onConfigurationChanged 

## date: 0310
#
android.os.Handler
android.os.Looper -- Threads by default do not have a message loop associated with them
android.os.Handler.Callback
android.os.HandlerThread -- Handy class for starting a new thread that has a looper.
android.os.Message
  
#
public abstract class AsyncTask 
android.os.AsyncTask<Params, Progress, Result>

-- obtainMessage or Message.obtain. More efficient than creating and allocating new instances
#
view.getHandler()
view.post(msg)

## date: 0307

# SharedPreferences
public interface SharedPreferences 

Context::
SharedPreferences getSharedPreferences (String name, 
                int mode)
                
 sharedPreferences.edit().putString("key", "value").apply()
 sharedPreferences.getString("key", "defaultValue")

                
## date: 0306
# Bundle
public final class Bundle 
extends BaseBundle implements Cloneable, Parcelable

a HashMap inside it, 
getXXX(String key)/putXXX(String key, XXX value)

Bundle bundle = new Bundle();
bundle.putString("key", "value");

# Loader
public class Loader 
extends Object 

A class that performs asynchronous loading of data. 
Loaders were designed for activities and fragments in order to cleanly handle configuration changes that occur in Activites and Fragments
 Known Direct Subclasses
AsyncTaskLoader<D>
  Known Indirect Subclasses
CursorLoader

That means common loader usual is AsyncTaskLoader<D> which managed by LoaderManager inside Activity or Fragment.

# LoaderManager
Activity.getLoaderManager()
Fragment.getLoaderManager()

getLoaderManager().restartLoader(
getLoaderManager().initLoader(

# must override method
protected abstract SomeType someMethod();

# AsyncTaskLoader
public abstract class AsyncTaskLoader 
extends Loader<D> 

must be override 
abstract D loadInBackground()

# how to use loader or self-defined loader
LoaderManager is public in Activity and Fragment, first thing we do is implemeting LoaderCallbacks, 
and return Loader by onCreateLoader. 
Secondly is start the loader, if use AsyncTaskLoader, method loadInBackground is core, 
otherwise override method onStartLoading.
